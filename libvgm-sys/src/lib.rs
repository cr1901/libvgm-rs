#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen */

pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const RWF_WRITE: u32 = 0;
pub const RWF_READ: u32 = 1;
pub const RWF_QUICKWRITE: u32 = 2;
pub const RWF_QUICKREAD: u32 = 3;
pub const RWF_REGISTER: u32 = 0;
pub const RWF_MEMORY: u32 = 16;
pub const RWF_CLOCK: u32 = 128;
pub const RWF_SRATE: u32 = 129;
pub const RWF_VOLUME: u32 = 130;
pub const RWF_VOLUME_LR: u32 = 131;
pub const DEVRW_VALUE: u32 = 0;
pub const DEVRW_A8D8: u32 = 17;
pub const DEVRW_A8D16: u32 = 18;
pub const DEVRW_A16D8: u32 = 33;
pub const DEVRW_A16D16: u32 = 34;
pub const DEVRW_BLOCK: u32 = 128;
pub const DEVRW_MEMSIZE: u32 = 129;
pub const DEVRI_SRMODE_NATIVE: u32 = 0;
pub const DEVRI_SRMODE_CUSTOM: u32 = 1;
pub const DEVRI_SRMODE_HIGHEST: u32 = 2;
pub const EERR_OK: u32 = 0;
pub const EERR_MORE_FOUND: u32 = 1;
pub const EERR_UNK_DEVICE: u32 = 240;
pub const EERR_NOT_FOUND: u32 = 248;
pub const EERR_INIT_ERR: u32 = 255;
pub const DEVID_SN76496: u32 = 0;
pub const DEVID_YM2413: u32 = 1;
pub const DEVID_YM2612: u32 = 2;
pub const DEVID_YM2151: u32 = 3;
pub const DEVID_SEGAPCM: u32 = 4;
pub const DEVID_RF5C68: u32 = 5;
pub const DEVID_YM2203: u32 = 6;
pub const DEVID_YM2608: u32 = 7;
pub const DEVID_YM2610: u32 = 8;
pub const DEVID_YM3812: u32 = 9;
pub const DEVID_YM3526: u32 = 10;
pub const DEVID_Y8950: u32 = 11;
pub const DEVID_YMF262: u32 = 12;
pub const DEVID_YMF278B: u32 = 13;
pub const DEVID_YMF271: u32 = 14;
pub const DEVID_YMZ280B: u32 = 15;
pub const DEVID_32X_PWM: u32 = 17;
pub const DEVID_AY8910: u32 = 18;
pub const DEVID_GB_DMG: u32 = 19;
pub const DEVID_NES_APU: u32 = 20;
pub const DEVID_YMW258: u32 = 21;
pub const DEVID_uPD7759: u32 = 22;
pub const DEVID_OKIM6258: u32 = 23;
pub const DEVID_OKIM6295: u32 = 24;
pub const DEVID_K051649: u32 = 25;
pub const DEVID_K054539: u32 = 26;
pub const DEVID_C6280: u32 = 27;
pub const DEVID_C140: u32 = 28;
pub const DEVID_C219: u32 = 128;
pub const DEVID_K053260: u32 = 29;
pub const DEVID_POKEY: u32 = 30;
pub const DEVID_QSOUND: u32 = 31;
pub const DEVID_SCSP: u32 = 32;
pub const DEVID_WSWAN: u32 = 33;
pub const DEVID_VBOY_VSU: u32 = 34;
pub const DEVID_SAA1099: u32 = 35;
pub const DEVID_ES5503: u32 = 36;
pub const DEVID_ES5506: u32 = 37;
pub const DEVID_X1_010: u32 = 38;
pub const DEVID_C352: u32 = 39;
pub const DEVID_GA20: u32 = 40;
pub const FCC_MAME: u32 = 1296125253;
pub const FCC_MAXM: u32 = 1296128077;
pub const FCC_EMU_: u32 = 1162696031;
pub const FCC_GPGX: u32 = 1196443480;
pub const FCC_GENS: u32 = 1195724371;
pub const FCC_ADLE: u32 = 1094995013;
pub const FCC_OMSX: u32 = 1330467672;
pub const FCC_NSFP: u32 = 1314080336;
pub const FCC_OOTK: u32 = 1330598987;
pub const FCC_MEDN: u32 = 1296385102;
pub const FCC_NUKE: u32 = 1314212677;
pub const FCC_NRS_: u32 = 1314018143;
pub const FCC_VBEL: u32 = 1447183692;
pub const FCC_CTR_: u32 = 1129599583;
pub const SN76496_W_REG: u32 = 0;
pub const SN76496_W_GGST: u32 = 1;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type UINT8 = ::std::os::raw::c_uchar;
pub type INT8 = ::std::os::raw::c_schar;
pub type UINT16 = ::std::os::raw::c_ushort;
pub type INT16 = ::std::os::raw::c_short;
pub type UINT32 = ::std::os::raw::c_uint;
pub type INT32 = ::std::os::raw::c_int;
pub type UINT64 = ::std::os::raw::c_ulonglong;
pub type INT64 = ::std::os::raw::c_longlong;
pub type bool_ = ::std::os::raw::c_uchar;
pub type DEV_SMPL = INT32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _device_data {
    pub chipInf: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__device_data() {
    assert_eq!(
        ::std::mem::size_of::<_device_data>(),
        8usize,
        concat!("Size of: ", stringify!(_device_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_device_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_device_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_data>())).chipInf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_data),
            "::",
            stringify!(chipInf)
        )
    );
}
pub type DEV_DATA = _device_data;
pub type DEV_DEF = _device_definition;
pub type DEV_INFO = _device_info;
pub type DEV_GEN_CFG = _device_generic_config;
pub type DEVLINK_INFO = _device_link_info;
pub type DEVCB_SRATE_CHG = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, newSRate: UINT32),
>;
pub type DEVFUNC_START = ::std::option::Option<
    unsafe extern "C" fn(cfg: *const DEV_GEN_CFG, retDevInf: *mut DEV_INFO) -> UINT8,
>;
pub type DEVFUNC_CTRL =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>;
pub type DEVFUNC_UPDATE = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut ::std::os::raw::c_void,
        samples: UINT32,
        outputs: *mut *mut DEV_SMPL,
    ),
>;
pub type DEVFUNC_OPTMASK = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, optionBits: UINT32),
>;
pub type DEVFUNC_PANALL = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, channelPanVal: *mut INT16),
>;
pub type DEVFUNC_SRCCB = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut ::std::os::raw::c_void,
        SmpRateChgCallback: DEVCB_SRATE_CHG,
        paramPtr: *mut ::std::os::raw::c_void,
    ),
>;
pub type DEVFUNC_LINKDEV = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut ::std::os::raw::c_void,
        devID: UINT8,
        devInfLink: *const DEV_INFO,
    ) -> UINT8,
>;
pub type DEVFUNC_READ_A8D8 = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, addr: UINT8) -> UINT8,
>;
pub type DEVFUNC_READ_A8D16 = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, addr: UINT8) -> UINT16,
>;
pub type DEVFUNC_READ_A16D8 = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, addr: UINT16) -> UINT8,
>;
pub type DEVFUNC_READ_A16D16 = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, addr: UINT16) -> UINT16,
>;
pub type DEVFUNC_READ_CLOCK =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> UINT32>;
pub type DEVFUNC_READ_SRATE =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> UINT32>;
pub type DEVFUNC_READ_VOLUME =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> UINT32>;
pub type DEVFUNC_WRITE_A8D8 = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, addr: UINT8, data: UINT8),
>;
pub type DEVFUNC_WRITE_A8D16 = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, addr: UINT8, data: UINT16),
>;
pub type DEVFUNC_WRITE_A16D8 = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, addr: UINT16, data: UINT8),
>;
pub type DEVFUNC_WRITE_A16D16 = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, addr: UINT16, data: UINT16),
>;
pub type DEVFUNC_WRITE_MEMSIZE =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, memsize: UINT32)>;
pub type DEVFUNC_WRITE_BLOCK = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut ::std::os::raw::c_void,
        offset: UINT32,
        length: UINT32,
        data: *const UINT8,
    ),
>;
pub type DEVFUNC_WRITE_CLOCK =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, clock: UINT32)>;
pub type DEVFUNC_WRITE_VOLUME =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, volume: INT32)>;
pub type DEVFUNC_WRITE_VOL_LR = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, volL: INT32, volR: INT32),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _devdef_readwrite_function {
    pub funcType: UINT8,
    pub rwType: UINT8,
    pub user: UINT16,
    pub funcPtr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__devdef_readwrite_function() {
    assert_eq!(
        ::std::mem::size_of::<_devdef_readwrite_function>(),
        16usize,
        concat!("Size of: ", stringify!(_devdef_readwrite_function))
    );
    assert_eq!(
        ::std::mem::align_of::<_devdef_readwrite_function>(),
        8usize,
        concat!("Alignment of ", stringify!(_devdef_readwrite_function))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_devdef_readwrite_function>())).funcType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_devdef_readwrite_function),
            "::",
            stringify!(funcType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_devdef_readwrite_function>())).rwType as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_devdef_readwrite_function),
            "::",
            stringify!(rwType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_devdef_readwrite_function>())).user as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_devdef_readwrite_function),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_devdef_readwrite_function>())).funcPtr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_devdef_readwrite_function),
            "::",
            stringify!(funcPtr)
        )
    );
}
pub type DEVDEF_RWFUNC = _devdef_readwrite_function;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _device_definition {
    pub name: *const ::std::os::raw::c_char,
    pub author: *const ::std::os::raw::c_char,
    pub coreID: UINT32,
    pub Start: DEVFUNC_START,
    pub Stop: DEVFUNC_CTRL,
    pub Reset: DEVFUNC_CTRL,
    pub Update: DEVFUNC_UPDATE,
    pub SetOptionBits: DEVFUNC_OPTMASK,
    pub SetMuteMask: DEVFUNC_OPTMASK,
    pub SetPanning: DEVFUNC_PANALL,
    pub SetSRateChgCB: DEVFUNC_SRCCB,
    pub LinkDevice: DEVFUNC_LINKDEV,
    pub rwFuncs: *const DEVDEF_RWFUNC,
}
#[test]
fn bindgen_test_layout__device_definition() {
    assert_eq!(
        ::std::mem::size_of::<_device_definition>(),
        104usize,
        concat!("Size of: ", stringify!(_device_definition))
    );
    assert_eq!(
        ::std::mem::align_of::<_device_definition>(),
        8usize,
        concat!("Alignment of ", stringify!(_device_definition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_definition>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_definition>())).author as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_definition>())).coreID as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(coreID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_definition>())).Start as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(Start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_definition>())).Stop as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(Stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_definition>())).Reset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(Reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_definition>())).Update as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(Update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_device_definition>())).SetOptionBits as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(SetOptionBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_definition>())).SetMuteMask as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(SetMuteMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_definition>())).SetPanning as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(SetPanning)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_device_definition>())).SetSRateChgCB as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(SetSRateChgCB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_definition>())).LinkDevice as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(LinkDevice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_definition>())).rwFuncs as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_definition),
            "::",
            stringify!(rwFuncs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _device_info {
    pub dataPtr: *mut DEV_DATA,
    pub sampleRate: UINT32,
    pub devDef: *const DEV_DEF,
    pub linkDevCount: UINT32,
    pub linkDevs: *mut DEVLINK_INFO,
}
#[test]
fn bindgen_test_layout__device_info() {
    assert_eq!(
        ::std::mem::size_of::<_device_info>(),
        40usize,
        concat!("Size of: ", stringify!(_device_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_device_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_device_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_info>())).dataPtr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_info),
            "::",
            stringify!(dataPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_info>())).sampleRate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_info),
            "::",
            stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_info>())).devDef as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_info),
            "::",
            stringify!(devDef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_info>())).linkDevCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_info),
            "::",
            stringify!(linkDevCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_info>())).linkDevs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_info),
            "::",
            stringify!(linkDevs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _device_link_info {
    pub devID: UINT8,
    pub linkID: UINT8,
    pub cfg: *mut DEV_GEN_CFG,
}
#[test]
fn bindgen_test_layout__device_link_info() {
    assert_eq!(
        ::std::mem::size_of::<_device_link_info>(),
        16usize,
        concat!("Size of: ", stringify!(_device_link_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_device_link_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_device_link_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_link_info>())).devID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_link_info),
            "::",
            stringify!(devID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_link_info>())).linkID as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_link_info),
            "::",
            stringify!(linkID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_link_info>())).cfg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_link_info),
            "::",
            stringify!(cfg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _device_generic_config {
    pub emuCore: UINT32,
    pub srMode: UINT8,
    pub flags: UINT8,
    pub clock: UINT32,
    pub smplRate: UINT32,
}
#[test]
fn bindgen_test_layout__device_generic_config() {
    assert_eq!(
        ::std::mem::size_of::<_device_generic_config>(),
        16usize,
        concat!("Size of: ", stringify!(_device_generic_config))
    );
    assert_eq!(
        ::std::mem::align_of::<_device_generic_config>(),
        4usize,
        concat!("Alignment of ", stringify!(_device_generic_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_generic_config>())).emuCore as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_generic_config),
            "::",
            stringify!(emuCore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_generic_config>())).srMode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_generic_config),
            "::",
            stringify!(srMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_generic_config>())).flags as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_generic_config),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_generic_config>())).clock as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_generic_config),
            "::",
            stringify!(clock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_device_generic_config>())).smplRate as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_device_generic_config),
            "::",
            stringify!(smplRate)
        )
    );
}
extern "C" {
    #[doc = " @brief Retrieve a list of all available sound cores for a device."]
    #[doc = ""]
    #[doc = " @param deviceID ID of the sound device (see DEVID_ constants in SoundDevs.h)"]
    #[doc = " @return an array of DEV_DEF* that is terminated by a NULL pointer"]
    pub fn SndEmu_GetDevDefList(deviceID: UINT8) -> *mut *const DEV_DEF;
}
extern "C" {
    #[doc = " @brief Initializes emulation for a sound device."]
    #[doc = ""]
    #[doc = " @param deviceID ID of the sound device to be emulated (see DEVID constants in SoundDevs.h)"]
    #[doc = " @param cfg chip-dependent configuration structure, contains various settings"]
    #[doc = " @param retDevInf pointer to DEV_INFO structure that gets filled with device information,"]
    #[doc = "        caller has to free information about linkable devices"]
    #[doc = " @return error code. 0 = success, see EERR constants"]
    pub fn SndEmu_Start(
        deviceID: UINT8,
        cfg: *const DEV_GEN_CFG,
        retDevInf: *mut DEV_INFO,
    ) -> UINT8;
}
extern "C" {
    #[doc = " @brief Deinitializes the sound core."]
    #[doc = ""]
    #[doc = " @param devInf DEV_INFO structure of the device to be stopped"]
    #[doc = " @return always returns 0 (success)"]
    pub fn SndEmu_Stop(devInf: *mut DEV_INFO) -> UINT8;
}
extern "C" {
    #[doc = " @brief Frees memory that holds information about linkable devices."]
    #[doc = "        Should be called sometime after a successful SndEmu_Start() in order to prevent memory leaks."]
    #[doc = ""]
    #[doc = " @param devInf DEV_INFO structure of the main device"]
    pub fn SndEmu_FreeDevLinkData(devInf: *mut DEV_INFO);
}
extern "C" {
    #[doc = " @brief Retrieve a function of a sound core that fullfills certain conditions."]
    #[doc = ""]
    #[doc = " @param devInf DEV_INFO structure of the device"]
    #[doc = " @param funcType function type (write/read, register/memory, ...), see RWF_ constants in EmuStructs.h"]
    #[doc = " @param rwType read/write data type, see DEVRW_ constants in EmuStructs.h"]
    #[doc = " @param user user-defined value for distinguishing functions with the same funcType/rwType, 0 = default"]
    #[doc = " @param retFuncPtr parameter the function pointer is stored in"]
    #[doc = " @return error code. 0 = success, 1 - success, but more possible candidates found, see EERR constants"]
    pub fn SndEmu_GetDeviceFunc(
        devInf: *const DEV_DEF,
        funcType: UINT8,
        rwType: UINT8,
        user: UINT16,
        retFuncPtr: *mut *mut ::std::os::raw::c_void,
    ) -> UINT8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct waveform_32bit_stereo {
    pub L: DEV_SMPL,
    pub R: DEV_SMPL,
}
#[test]
fn bindgen_test_layout_waveform_32bit_stereo() {
    assert_eq!(
        ::std::mem::size_of::<waveform_32bit_stereo>(),
        8usize,
        concat!("Size of: ", stringify!(waveform_32bit_stereo))
    );
    assert_eq!(
        ::std::mem::align_of::<waveform_32bit_stereo>(),
        4usize,
        concat!("Alignment of ", stringify!(waveform_32bit_stereo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<waveform_32bit_stereo>())).L as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(waveform_32bit_stereo),
            "::",
            stringify!(L)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<waveform_32bit_stereo>())).R as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(waveform_32bit_stereo),
            "::",
            stringify!(R)
        )
    );
}
pub type WAVE_32BS = waveform_32bit_stereo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resampling_state {
    pub smpRateSrc: UINT32,
    pub smpRateDst: UINT32,
    pub volumeL: INT16,
    pub volumeR: INT16,
    pub resampleMode: UINT8,
    pub resampler: UINT8,
    pub StreamUpdate: DEVFUNC_UPDATE,
    pub su_DataPtr: *mut ::std::os::raw::c_void,
    pub smpP: UINT32,
    pub smpLast: UINT32,
    pub smpNext: UINT32,
    pub lSmpl: WAVE_32BS,
    pub nSmpl: WAVE_32BS,
    pub smplBufSize: UINT32,
    pub smplBufs: [*mut DEV_SMPL; 2usize],
}
#[test]
fn bindgen_test_layout_resampling_state() {
    assert_eq!(
        ::std::mem::size_of::<resampling_state>(),
        80usize,
        concat!("Size of: ", stringify!(resampling_state))
    );
    assert_eq!(
        ::std::mem::align_of::<resampling_state>(),
        8usize,
        concat!("Alignment of ", stringify!(resampling_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).smpRateSrc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(smpRateSrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).smpRateDst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(smpRateDst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).volumeL as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(volumeL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).volumeR as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(volumeR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).resampleMode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(resampleMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).resampler as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(resampler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).StreamUpdate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(StreamUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).su_DataPtr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(su_DataPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).smpP as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(smpP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).smpLast as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(smpLast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).smpNext as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(smpNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).lSmpl as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(lSmpl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).nSmpl as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(nSmpl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).smplBufSize as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(smplBufSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<resampling_state>())).smplBufs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(resampling_state),
            "::",
            stringify!(smplBufs)
        )
    );
}
pub type RESMPL_STATE = resampling_state;
extern "C" {
    #[doc = " @brief Sets up a the resampler to use a certain sound device."]
    #[doc = ""]
    #[doc = " @param CAA resampler to be connected to a device"]
    #[doc = " @param devInf device to be used by the resampler"]
    pub fn Resmpl_DevConnect(CAA: *mut RESMPL_STATE, devInf: *const DEV_INFO);
}
extern "C" {
    #[doc = " @brief Helper function to quickly set resampler configuration values."]
    #[doc = ""]
    #[doc = " @param CAA resampler to be configured"]
    #[doc = " @param resampleMode resampling mode, 0xFF = auto"]
    #[doc = " @param volume volume gain applied during resampling process, 8.8 fixed point, 0x100 equals 100%"]
    #[doc = " @param destSampleRate sample rate of the output stream"]
    pub fn Resmpl_SetVals(
        CAA: *mut RESMPL_STATE,
        resampleMode: UINT8,
        volume: UINT16,
        destSampleRate: UINT32,
    );
}
extern "C" {
    #[doc = " @brief Initializes a resampler. The resampler must be configured and connected to a device."]
    #[doc = ""]
    #[doc = " @param CAA resampler to be initialized"]
    pub fn Resmpl_Init(CAA: *mut RESMPL_STATE);
}
extern "C" {
    #[doc = " @brief Deinitializes a resampler and frees used memory."]
    #[doc = ""]
    #[doc = " @param CAA resampler to be deinitialized"]
    pub fn Resmpl_Deinit(CAA: *mut RESMPL_STATE);
}
extern "C" {
    #[doc = " @brief Sets the sample rate of the sound device. Used for sample rate changes without deinit/init."]
    #[doc = ""]
    #[doc = " @param CAA resampler whose input sample rate is changed"]
    pub fn Resmpl_ChangeRate(DataPtr: *mut ::std::os::raw::c_void, newSmplRate: UINT32);
}
extern "C" {
    #[doc = " @brief Request and resample input data in order to render samples into the output buffer."]
    #[doc = ""]
    #[doc = " @param CAA resampler to be executed"]
    #[doc = " @param samples number of output samples to be rendered"]
    #[doc = " @param smplBuffer buffer for output data"]
    pub fn Resmpl_Execute(CAA: *mut RESMPL_STATE, samples: UINT32, smplBuffer: *mut WAVE_32BS);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sn76496_config {
    pub _genCfg: DEV_GEN_CFG,
    pub noiseTaps: UINT16,
    pub shiftRegWidth: UINT8,
    pub negate: UINT8,
    pub clkDiv: UINT8,
    pub ncrPSG: UINT8,
    pub segaPSG: UINT8,
    pub stereo: UINT8,
    pub t6w28_tone: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sn76496_config() {
    assert_eq!(
        ::std::mem::size_of::<sn76496_config>(),
        32usize,
        concat!("Size of: ", stringify!(sn76496_config))
    );
    assert_eq!(
        ::std::mem::align_of::<sn76496_config>(),
        8usize,
        concat!("Alignment of ", stringify!(sn76496_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sn76496_config>()))._genCfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sn76496_config),
            "::",
            stringify!(_genCfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sn76496_config>())).noiseTaps as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sn76496_config),
            "::",
            stringify!(noiseTaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sn76496_config>())).shiftRegWidth as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(sn76496_config),
            "::",
            stringify!(shiftRegWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sn76496_config>())).negate as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(sn76496_config),
            "::",
            stringify!(negate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sn76496_config>())).clkDiv as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sn76496_config),
            "::",
            stringify!(clkDiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sn76496_config>())).ncrPSG as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(sn76496_config),
            "::",
            stringify!(ncrPSG)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sn76496_config>())).segaPSG as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(sn76496_config),
            "::",
            stringify!(segaPSG)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sn76496_config>())).stereo as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(sn76496_config),
            "::",
            stringify!(stereo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sn76496_config>())).t6w28_tone as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sn76496_config),
            "::",
            stringify!(t6w28_tone)
        )
    );
}
pub type SN76496_CFG = sn76496_config;
extern "C" {
    #[link_name = "\u{1}devDefList_SN76496"]
    pub static mut devDefList_SN76496: [*const DEV_DEF; 0usize];
}
